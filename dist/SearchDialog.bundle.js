(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1292:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var material_ui_MenuItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(235);\n/* harmony import */ var material_ui_MenuItem__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(material_ui_MenuItem__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var material_ui_Dialog__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1147);\n/* harmony import */ var material_ui_Dialog__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(material_ui_Dialog__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var material_ui_AutoComplete__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1173);\n/* harmony import */ var material_ui_AutoComplete__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(material_ui_AutoComplete__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1164);\n/* harmony import */ var material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var material_ui_FontIcon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(71);\n/* harmony import */ var material_ui_FontIcon__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(material_ui_FontIcon__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var material_ui_IconButton__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(103);\n/* harmony import */ var material_ui_IconButton__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(material_ui_IconButton__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var material_ui_RaisedButton__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1150);\n/* harmony import */ var material_ui_RaisedButton__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(material_ui_RaisedButton__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var react_redux_toastr__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(125);\n/* harmony import */ var react_redux_toastr__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_redux_toastr__WEBPACK_IMPORTED_MODULE_8__);\n// searchdialog.tsx\n/*\n    TODO: should cache lookup list in parent\n*/\n\n\n\nvar { Component } = react__WEBPACK_IMPORTED_MODULE_0__;\n\n\n\n\n\n\n\n\nlet ReactGA = __webpack_require__(546);\nlet SearchDialog = class extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            dialogOpen: true,\n            searchDialogAspect: 'expenses'\n        };\n        this.logEvent = parms => {\n            if (window.location.hostname == 'budgetpedia.ca') {\n                ReactGA.event(parms);\n            }\n        };\n        this.findChartLookups = null;\n        this.finderLookupPromise = path => {\n            let root = './db/repositories/toronto/';\n            let filespec = root + path;\n            let promise = new Promise((resolve, reject) => {\n                fetch(filespec).then(response => {\n                    if (response.ok) {\n                        // console.log('response for ' + path,response)\n                        try {\n                            let json = response.json().then(json => {\n                                resolve(json);\n                            }).catch(reason => {\n                                let msg = 'failure to resolve ' + path + ' ' + reason;\n                                console.log(msg);\n                                reject(msg);\n                            });\n                        } catch (e) {\n                            console.log('error ' + path, e.message);\n                            reject('failure to load ' + path);\n                        }\n                    } else {\n                        reject('could not load file ' + path);\n                    }\n                }).catch(reason => {\n                    reject(reason + ' ' + path);\n                });\n            });\n            return promise;\n        };\n        this.getAllFindLookups = () => {\n            let summaryPromise = this.finderLookupPromise('datasets/summary/lookups/lookups.json');\n            let pbftPromise = this.finderLookupPromise('datasets/pbft/lookups/lookups.json');\n            let actualExpensesPromise = this.finderLookupPromise('datasets/actualexpenses/lookups/lookups.json');\n            let actualRevenuesPromise = this.finderLookupPromise('datasets/actualrevenues/lookups/lookups.json');\n            let expensesByObjectPromise = this.finderLookupPromise('datasets/expenditures/lookups/lookups.json');\n            let functionalViewpointPromise = this.finderLookupPromise('viewpoints/functional.json');\n            let structuralViewpointPromise = this.finderLookupPromise('viewpoints/structural.json');\n            let actualExpensesViewpointPromise = this.finderLookupPromise('viewpoints/actualexpenses.json');\n            let actualRevenuesViewpointPromise = this.finderLookupPromise('viewpoints/actualrevenues.json');\n            let expendituresViewpointPromise = this.finderLookupPromise('viewpoints/expenditures.json');\n            let promise = new Promise((resolve, reject) => {\n                Promise.all([summaryPromise, pbftPromise, actualExpensesPromise, actualRevenuesPromise, expensesByObjectPromise, functionalViewpointPromise, structuralViewpointPromise, actualExpensesViewpointPromise, actualRevenuesViewpointPromise, expendituresViewpointPromise]).then(values => {\n                    // pick out viewpint lookups from viewpoint structures\n                    for (let i = 5; i < 10; i++) {\n                        values[i] = values[i]['Meta'].Lookups;\n                    }\n                    let lookups;\n                    lookups = {\n                        datasets: {\n                            summarybudgets: values[0],\n                            detailedbudgets: values[1],\n                            auditedexpenses: values[2],\n                            auditedrevenues: values[3],\n                            auditedexpenditures: values[4]\n                        },\n                        viewpoints: {\n                            functionalbudget: values[5],\n                            structuralbudget: values[6],\n                            actualexpenses: values[7],\n                            actualrevenues: values[8],\n                            expenditures: values[9]\n                        }\n                    };\n                    resolve(lookups);\n                }).catch(reason => {\n                    reject(reason);\n                });\n            });\n            return promise;\n        };\n        // coerce raw lookup data into form suitable for autofill field\n        /*\n            viewpoint\n            dataset\n            aspects:{}\n            dimension\n            code\n            name\n            value\n        */\n        // TODO: the values here should be taken from source; automatic update\n        this.findDictionary = {\n            // viewpoints\n            structuralbudget: 'Structural Budget',\n            functionalbudget: 'Functional Budget',\n            actualexpenses: 'Actual Expenses',\n            actualrevenues: 'Actual Revenues',\n            expenditures: 'Expenses by Object',\n            // sources\n            auditedrevenues: 'Audited Statements',\n            auditedexpenses: 'Audited Statements',\n            auditedexpenditures: 'Audited Statements',\n            detailedbudgets: 'Detailed Budgets',\n            summarybudgets: 'Summary Budgets',\n            // levels (collation)\n            Taxonomy: '01-Taxonomy',\n            auditedexpense: \"07-Expenses\",\n            auditedrevenue: \"08-Revenues\",\n            program: '02-Programs',\n            service: '03-Services',\n            activity: '04-Activities',\n            expense: '06-Expenditures',\n            revenue: '05-Receipts',\n            permanence: '09-Permanence',\n            expenditure: \"10-Expenses\"\n        };\n        this.processFindChartLookups = data => {\n            let collation = {\n                Taxonomy: '01-taxonomy',\n                auditedexpense: '07-audited expense',\n                auditedrevenue: '08-audited revenue',\n                program: '02-program',\n                service: '03-service',\n                activity: '04-activity',\n                expense: '06-expense',\n                revenue: '05-revenue',\n                permanence: '09-permanence',\n                expenditure: '10-expenditure'\n            };\n            let lookups = [];\n            let { viewpoints, datasets } = data;\n            // default viewpoints\n            let sourceviewpoints = {\n                auditedexpenses: 'actualexpenses',\n                auditedrevenues: 'actualrevenues',\n                auditedexpenditures: 'expenditures',\n                detailedbudgets: 'functionalbudget',\n                summarybudgets: 'functionalbudget'\n            };\n            let alternatesourceviewpoints = {\n                detailedbudgets: 'structuralbudget',\n                summarybudgets: 'structuralbudget'\n            };\n            let sourceaspects = {\n                auditedexpenses: { expenses: true },\n                auditedrevenues: { revenues: true },\n                auditedexpenditures: { expenses: true },\n                detailedbudgets: { expenses: true, revenues: true, staffing: true },\n                summarybudgets: { expenses: true, revenues: true, staffing: true }\n            };\n            let dictionary = this.findDictionary;\n            for (let datasetname in datasets) {\n                let dataset = datasets[datasetname];\n                for (let dimensionname in dataset) {\n                    let dimension = dataset[dimensionname];\n                    if (datasetname == 'detailedbudgets') {\n                        // console.log('processing detailed budgets for dimension',dimensionname)\n                        switch (dimensionname) {\n                            case 'activity':\n                                sourceaspects.detailedbudgets = { expenses: true, revenues: true, staffing: false };\n                                break;\n                            case 'expense':\n                                sourceaspects.detailedbudgets = { expenses: true, revenues: false, staffing: false };\n                                break;\n                            case 'permanence':\n                                sourceaspects.detailedbudgets = { expenses: false, revenues: false, staffing: true };\n                                break;\n                            case 'program':\n                                sourceaspects.detailedbudgets = { expenses: true, revenues: true, staffing: true };\n                                break;\n                            case 'revenue':\n                                sourceaspects.detailedbudgets = { expenses: false, revenues: true, staffing: false };\n                                break;\n                            case 'service':\n                                sourceaspects.detailedbudgets = { expenses: true, revenues: true, staffing: false };\n                                break;\n                        }\n                    }\n                    let dimensionlookupname;\n                    if (datasetname == 'auditedrevenues') {\n                        dimensionlookupname = 'auditedrevenue';\n                    } else if (datasetname == 'auditedexpenses') {\n                        dimensionlookupname = 'auditedexpense';\n                    } else {\n                        dimensionlookupname = dimensionname;\n                    }\n                    for (let code in dimension) {\n                        let name = dimension[code];\n                        let sortname = '(' + collation[dimensionname] + ') ' + name;\n                        let selection = {\n                            viewpoint: sourceviewpoints[datasetname],\n                            datasource: datasetname,\n                            aspects: sourceaspects[datasetname],\n                            dimension: dimensionname,\n                            code,\n                            name,\n                            sortname,\n                            value: react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_MenuItem__WEBPACK_IMPORTED_MODULE_1___default.a, { style: { whiteSpace: 'normal', lineHeight: '150%' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontWeight: \"bold\" } }, name)), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"dataset: \", dictionary[sourceviewpoints[datasetname]])), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"scope: \", dictionary[dimensionlookupname], \" \")), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"data source: \", dictionary[datasetname])))\n                        };\n                        lookups.push(selection);\n                        // including structuralviewpoint for all relevant choices is annoying (duplicates)\n                        //  suppress for now\n                        if (datasetname == 'detailedbudgets' || datasetname == 'summarybudgets') {\n                            let sortname = '(' + collation[dimensionname] + ') ' + name;\n                            let selection = {\n                                viewpoint: alternatesourceviewpoints[datasetname],\n                                datasource: datasetname,\n                                aspects: sourceaspects[datasetname],\n                                dimension: dimensionname,\n                                code,\n                                name,\n                                sortname,\n                                value: react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_MenuItem__WEBPACK_IMPORTED_MODULE_1___default.a, { style: { whiteSpace: 'normal', lineHeight: '150%' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontWeight: \"bold\" } }, name)), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"dataset: \", dictionary[alternatesourceviewpoints[datasetname]])), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"scope: \", dictionary[dimensionname], \" \")), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"data source: \", dictionary[datasetname])))\n                            };\n                            lookups.push(selection);\n                        }\n                    }\n                }\n            }\n            // default viewpoint sources\n            let viewpointsources = {\n                actualexpenses: 'auditedexpenses',\n                actualrevenues: 'auditedrevenues',\n                expenditures: 'auditedexpenditures',\n                functionalbudget: 'summarybudgets',\n                structuralbudget: 'summarybudgets'\n            };\n            let viewpointaspects = {\n                actualexpenses: { expenses: true },\n                actualrevenues: { revenues: true },\n                expenditures: { expenses: true },\n                functionalbudget: { expenses: true, revenues: true, staffing: true },\n                structuralbudget: { expenses: true, revenues: true, staffing: true }\n            };\n            for (let viewpointname in viewpoints) {\n                let viewpoint = viewpoints[viewpointname];\n                for (let dimensionname in viewpoint) {\n                    let dimension = viewpoint[dimensionname];\n                    for (let code in dimension) {\n                        let name = dimension[code];\n                        let sortname = '(' + collation[dimensionname] + ') ' + name;\n                        let selection = {\n                            viewpoint: viewpointname,\n                            datasource: viewpointsources[viewpointname],\n                            aspects: viewpointaspects[viewpointname],\n                            dimension: dimensionname,\n                            code,\n                            name,\n                            sortname,\n                            value: react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_MenuItem__WEBPACK_IMPORTED_MODULE_1___default.a, { style: { whiteSpace: 'normal', lineHeight: '150%' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontWeight: \"bold\" } }, name)), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"dataset: \", dictionary[viewpointname])), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"scope: \", dictionary[dimensionname], \" \")), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { display: 'inline-block', whiteSpace: 'nowrap', paddingRight: '20px' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { fontStyle: \"italic\", color: \"gray\" } }, \"data source: \", dictionary[viewpointsources[viewpointname]])))\n                        };\n                        lookups.push(selection);\n                    }\n                }\n            }\n            return lookups;\n        };\n        this.findOnNewRequest = (chosenRequest, index) => {\n            // console.log('findOnNewRequest',this.findAspectChartLookups)\n            if (index == -1) {\n                this.resetSelectionParameters();\n            } else {\n                let item = this.findAspectChartLookups[index];\n                let dictionary = this.findDictionary;\n                // console.log('selected item',item)\n                this.findSelection = {\n                    known: true,\n                    level: item.dimension,\n                    leveldisplay: dictionary[item.dimension],\n                    source: item.datasource,\n                    sourcedisplay: dictionary[item.datasource],\n                    viewpoint: item.viewpoint,\n                    viewpointdisplay: dictionary[item.viewpoint],\n                    code: item.code,\n                    name: item.name\n                };\n                this.forceUpdate();\n            }\n        };\n        this.findClearSearchText = () => {\n            let instance = this.refs['autocomplete'];\n            instance.setState({ searchText: '' });\n            // instance.focus();\n        };\n        this.findSelection = {\n            known: false,\n            viewpoint: null,\n            viewpointdisplay: '?',\n            source: null,\n            sourcedisplay: '?',\n            level: null,\n            leveldisplay: '?',\n            code: null,\n            name: null\n        };\n        this.findOnUpdateInput = () => {\n            // console.log('findOnUpdateInput',this.findAspectChartLookups,this.findSelection)\n            if (this.findSelection.known) {\n                this.resetSelectionParameters();\n                this.forceUpdate();\n            }\n        };\n        this.onChangeFindAspect = (e, value) => {\n            this.findAspectChartLookups = null;\n            this.findClearSearchText();\n            this.resetSelectionParameters();\n            this.setState({\n                searchDialogAspect: value\n            });\n        };\n        this.resetSelectionParameters = () => {\n            this.findSelection = {\n                known: false,\n                viewpoint: null,\n                viewpointdisplay: '?',\n                source: null,\n                sourcedisplay: '?',\n                level: null,\n                leveldisplay: '?',\n                code: null,\n                name: null\n            };\n        };\n        this.getFindAspectLookups = () => {\n            let self = this;\n            // console.log('in getFindAspectLookups',self.state, self.findChartLookups)\n            if (!self.findChartLookups) {\n                self.findAspectChartLookups = null;\n                return;\n            }\n            let sourcelist = self.findChartLookups;\n            // console.log('sourcelist',sourcelist)\n            let targetlist = [];\n            let aspect = self.state.searchDialogAspect;\n            for (let item of sourcelist) {\n                if (!(item.viewpoint == 'structuralbudget') && !(item.datasource == 'detailedbudgets' && item.sortname < '(03')) {\n                    if (item.aspects[aspect]) {\n                        targetlist.push(item);\n                    }\n                }\n            }\n            targetlist.sort((a, b) => {\n                if (a.sortname < b.sortname) return -1;\n                if (a.sortname > b.sortname) return 1;\n                return 0;\n            });\n            self.findAspectChartLookups = targetlist;\n        };\n        this.findAspectChartLookups = null;\n        this.findParameters = {\n            parms: null\n        };\n        this.findApplyChart = () => {\n            let explorer = this;\n            explorer.onRequestClose();\n            let selection = explorer.findSelection;\n            let parms = {\n                viewpoint: selection.viewpoint,\n                source: selection.source,\n                level: selection.level,\n                code: selection.code,\n                aspect: explorer.state.searchDialogAspect,\n                name: selection.name\n            };\n            this.logEvent({\n                category: 'ExplorerBranch',\n                action: 'Find chart',\n                label: parms.name\n            });\n            explorer.findParameters.parms = parms;\n            explorer.props.onConfirm(parms);\n        };\n        this.onRequestClose = () => {\n            this.props.onRequestClose();\n        };\n        this.searchDialog = () => {\n            // console.log('returning dialog',this.findAspectChartLookups)\n            return react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_Dialog__WEBPACK_IMPORTED_MODULE_2___default.a, { title: react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { padding: '12px 0 0 12px' } }, \"Find a Chart\"), modal: false, open: this.state.dialogOpen, onRequestClose: this.onRequestClose, autoScrollBodyContent: false, contentStyle: { maxWidth: '600px' }, autoDetectWindowHeight: false }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_AutoComplete__WEBPACK_IMPORTED_MODULE_3___default.a, { ref: 'autocomplete', floatingLabelText: \"type in a key word, then select a list item (sorted by scope)\", filter: material_ui_AutoComplete__WEBPACK_IMPORTED_MODULE_3___default.a.caseInsensitiveFilter, dataSource: this.findAspectChartLookups || [], dataSourceConfig: { text: 'name', value: 'value' }, fullWidth: true, openOnFocus: false, style: { width: '100%' }, menuStyle: { maxHeight: \"300px\", overflowY: 'auto' }, maxSearchResults: 80, onNewRequest: this.findOnNewRequest, onUpdateInput: this.findOnUpdateInput, autoFocus: true }), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4__[\"RadioButtonGroup\"], { valueSelected: this.state.searchDialogAspect, name: \"findchart\", onChange: this.onChangeFindAspect }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4__[\"RadioButton\"], { style: { display: 'inline-block', width: 'auto', marginRight: '50px' }, value: \"expenses\", label: \"expenditures/expenses\" }), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4__[\"RadioButton\"], { style: { display: 'inline-block', width: 'auto', marginRight: '50px' }, value: \"revenues\", label: \"receipts/revenues\" }), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_RadioButton__WEBPACK_IMPORTED_MODULE_4__[\"RadioButton\"], { style: { display: 'inline-block', width: 'auto', marginRight: '50px' }, value: \"staffing\", label: \"staffing\" }))), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_IconButton__WEBPACK_IMPORTED_MODULE_6___default.a, { style: {\n                    top: 0,\n                    right: 0,\n                    padding: 0,\n                    height: \"36px\",\n                    width: \"36px\",\n                    position: \"absolute\",\n                    zIndex: 2\n                }, onClick: this.onRequestClose }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_FontIcon__WEBPACK_IMPORTED_MODULE_5___default.a, { className: \"material-icons\", style: { cursor: \"pointer\" } }, \"close\")), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { padding: \"8px\" } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { whiteSpace: 'nowrap', display: 'inline-block' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { color: 'silver', fontStyle: 'italic' } }, \"dataset: \"), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { color: this.findSelection.known ? 'black' : 'silver', marginRight: '50px', fontStyle: 'italic' } }, this.findSelection.viewpointdisplay)), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { whiteSpace: 'nowrap', display: 'inline-block' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { color: 'silver', fontStyle: 'italic' } }, \"scope: \"), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { color: this.findSelection.known ? 'black' : 'silver', marginRight: '50px', fontStyle: 'italic' } }, this.findSelection.leveldisplay)), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { whiteSpace: 'nowrap', display: 'inline-block' } }, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { color: 'silver', fontStyle: 'italic' } }, \"data source: \"), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"span\", { style: { color: this.findSelection.known ? 'black' : 'silver', marginRight: '50px', fontStyle: 'italic' } }, this.findSelection.sourcedisplay))), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", null, react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_RaisedButton__WEBPACK_IMPORTED_MODULE_7___default.a, { disabled: !this.findSelection.known, onClick: this.findApplyChart, label: \"Apply\", primary: true, style: { marginRight: \"50px\" } }), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](material_ui_RaisedButton__WEBPACK_IMPORTED_MODULE_7___default.a, { disabled: false, onClick: this.onRequestClose, label: \"Cancel\", secondary: true })), react__WEBPACK_IMPORTED_MODULE_0__[\"createElement\"](\"div\", { style: { height: '200px' } }));\n        };\n    }\n    componentWillMount() {\n        this.getAllFindLookups().then(data => {\n            // console.log('sourcedata', data)\n            this.findChartLookups = this.processFindChartLookups(data);\n            this.forceUpdate(); // inject data into autocomplete\n        }).catch(reason => {\n            react_redux_toastr__WEBPACK_IMPORTED_MODULE_8__[\"toastr\"].error('Error loading finder lookups: ' + reason);\n        });\n    }\n    componentDidMount() {\n        // console.log('did mount')\n        this.resetSelectionParameters();\n    }\n    render() {\n        if (this.state.dialogOpen && !this.findAspectChartLookups) {\n            this.getFindAspectLookups();\n        }\n        let dialog = this.searchDialog();\n        return dialog;\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (SearchDialog);\n\n//# sourceURL=webpack:///./ts/addons/explorer/components/searchdialog.tsx?")}}]);