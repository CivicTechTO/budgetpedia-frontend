(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1287:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/Tabs/index.js\nvar Tabs = __webpack_require__(1183);\n\n// EXTERNAL MODULE: ./node_modules/react-animations/lib/index.js\nvar lib = __webpack_require__(1152);\n\n// EXTERNAL MODULE: ./node_modules/radium/es/keyframes.js\nvar keyframes = __webpack_require__(507);\n\n// EXTERNAL MODULE: ./node_modules/radium/es/index.js + 22 modules\nvar es = __webpack_require__(1288);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/IconButton/index.js\nvar IconButton = __webpack_require__(102);\nvar IconButton_default = /*#__PURE__*/__webpack_require__.n(IconButton);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/FontIcon/index.js\nvar FontIcon = __webpack_require__(122);\nvar FontIcon_default = /*#__PURE__*/__webpack_require__.n(FontIcon);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/SvgIcon/index.js\nvar SvgIcon = __webpack_require__(47);\nvar SvgIcon_default = /*#__PURE__*/__webpack_require__.n(SvgIcon);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/DropDownMenu/index.js\nvar DropDownMenu = __webpack_require__(1145);\nvar DropDownMenu_default = /*#__PURE__*/__webpack_require__.n(DropDownMenu);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/MenuItem/index.js\nvar MenuItem = __webpack_require__(236);\nvar MenuItem_default = /*#__PURE__*/__webpack_require__.n(MenuItem);\n\n// EXTERNAL MODULE: ./ts/addons/explorer/constants.tsx\nvar constants = __webpack_require__(165);\n\n// EXTERNAL MODULE: ./ts/addons/explorer/actions.tsx\nvar actions = __webpack_require__(6);\n\n// EXTERNAL MODULE: ./ts/addons/explorer/modules/utilities.tsx\nvar utilities = __webpack_require__(1142);\n\n// EXTERNAL MODULE: ./node_modules/material-ui/Dialog/index.js\nvar Dialog = __webpack_require__(1143);\nvar Dialog_default = /*#__PURE__*/__webpack_require__.n(Dialog);\n\n// EXTERNAL MODULE: ./node_modules/react-table/es/index.js + 6 modules\nvar react_table_es = __webpack_require__(1156);\n\n// EXTERNAL MODULE: ./node_modules/react-csv/index.js\nvar react_csv = __webpack_require__(1178);\n\n// CONCATENATED MODULE: ./ts/addons/explorer/components/datatable.tsx\n// datatable.tsx\n\n\n\nvar { Component } = react;\n\n\n\n\n\nlet stringify = __webpack_require__(1174);\nvar format = __webpack_require__(1153);\nvar numberformat = format({ round: 0 });\nvar percentformat = format({ suffix: \'%\', round: 1 });\nclass datatable_DataTable extends Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            dialogOpen: true\n        };\n        this.specifications = null;\n        this.onRequestClose = () => {\n            this.props.onRequestClose();\n        };\n        this.csv = null;\n        this.assembleCSVdata = () => {\n            if (this.csv) return this.csv;\n            let tableparms = this.specifications;\n            let { columns, title, data, footer } = tableparms;\n            let headercells = [];\n            let titlecells = [title];\n            // let footercells = []\n            // let datacells = []\n            for (let n = 0; n < columns.length; n++) {\n                headercells.push(columns[n].Header);\n            }\n            // titlecells[0] = title\n            // for (let n = 0; n < footer.length; n++) {\n            //     footercells.push(footer[n])\n            // }\n            let csv = [titlecells, headercells, ...data, footer];\n            csv = stringify(csv);\n            // console.log(\'csv\',csv)\n            this.csv = csv;\n            return this.csv;\n        };\n        this.assembleTableData = () => {\n            let sourcedata = this.specifications.data;\n            let data = [];\n            for (let row of sourcedata) {\n                let newdata = {};\n                for (let n = 0; n < row.length; n++) {\n                    newdata[n] = row[n];\n                }\n                data.push(newdata);\n            }\n            let newdata = {};\n            let row = this.specifications.footer;\n            for (let n = 0; n < row.length; n++) {\n                newdata[n] = row[n];\n            }\n            data.push(newdata);\n            return data;\n        };\n        this.assembleTableColumns = () => {\n            let sourcecolumns = this.specifications.columns;\n            let columns = [];\n            for (let n = 0; n < sourcecolumns.length; n++) {\n                let column = columns[n] = sourcecolumns[n];\n                column.accessor = n.toString();\n                column.Cell = props => this._formatCell(column, props);\n            }\n            return columns;\n        };\n        this._formatCell = (column, props) => {\n            let cell;\n            if (column.type == \'number\' || column.type == \'ratio\') {\n                cell = react["createElement"]("div", { style: { textAlign: \'right\' } }, this._formatValue(column, props));\n            } else {\n                cell = react["createElement"]("div", null, props.value);\n            }\n            return cell;\n        };\n        this._formatValue = (column, props) => {\n            let value = props.value;\n            if (!value) return null;\n            if (column.type == \'ratio\') {\n                value *= 100;\n                if (value) value = percentformat(value);\n            }\n            if (column.type == \'number\') {\n                value = numberformat(value);\n            }\n            return value;\n        };\n        this.tableDialog = () => {\n            // console.log(\'returning dialog\',this.findAspectChartLookups)\n            return react["createElement"](Dialog_default.a, { title: react["createElement"]("div", { style: { padding: \'12px 0 0 12px\', textAlign: \'center\' } }, "Data Table"), modal: false, open: this.state.dialogOpen, onRequestClose: this.onRequestClose, autoScrollBodyContent: true, autoDetectWindowHeight: true }, react["createElement"](IconButton_default.a, { style: {\n                    top: 0,\n                    right: 0,\n                    padding: 0,\n                    height: "36px",\n                    width: "36px",\n                    position: "absolute",\n                    zIndex: 2\n                }, tooltip: "close", onClick: this.onRequestClose }, react["createElement"](FontIcon_default.a, { className: "material-icons", style: { cursor: "pointer" } }, "close")), react["createElement"]("div", { style: {\n                    top: 0,\n                    left: 0,\n                    padding: 0,\n                    height: "36px",\n                    position: "absolute",\n                    zIndex: 2\n                } }, react["createElement"](react_csv["CSVLink"], { data: this.assembleCSVdata(), filename: \'budgetpedia.chart.data.csv\' }, react["createElement"](FontIcon_default.a, { className: "material-icons", style: { cursor: "pointer", verticalAlign: \'middle\' } }, "file_download"), react["createElement"]("span", null, "Download")), " (right click \\"Save link as...\\" with ad blocker)"), react["createElement"]("div", { style: { fontWeight: \'bold\' } }, this.specifications.title), react["createElement"](react_table_es["a" /* default */], { style: { height: \'300px\' }, data: this.assembleTableData(), columns: this.assembleTableColumns(), showPagination: false }));\n        };\n    }\n    componentWillMount() {\n        this.specifications = this.props.specifications;\n        // console.log(\'DataTable specs\',this.specifications)\n    }\n    render() {\n        let dialog = this.tableDialog();\n        return dialog;\n    }\n}\n/* harmony default export */ var components_datatable = (datatable_DataTable);\n// CONCATENATED MODULE: ./ts/addons/explorer/components/explorercell.tsx\n// copyright (c) 2016 Henrik Bechmann, Toronto, MIT Licence\n// explorerchart.tsx\n/*\n    BUG: The rightmost piechart does not have its selected component reselected\n        after migrate away from, and return to explorer page.\n    TODO: two way arrow icon to signify impose current chart settings on entire branch\n*/\n// <reference path="../../../typings-custom/chart.d.ts" />\n\n\n\nvar { Component: explorercell_Component } = react;\nvar { Chart } = __webpack_require__(1147);\n\n\n\n\n\n\n\n\n\nclass explorercell_ExplorerCell extends explorercell_Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            deltastate: false,\n            netstate: false,\n            variancestate: false,\n            chartParms: null,\n            datatableopen: false\n        };\n        // for use by BudgetCell instance...\n        this.getState = () => this.state;\n        this.getProps = () => this.props;\n        this.urlparms = null;\n        this.lastactiongeneration = 0;\n        this.waitafteraction = 0;\n        // state change manager\n        this._respondToGlobalStateChange = () => {\n            let previousControlData = this._previousControlData;\n            let currentControlData = this.props.declarationData;\n            let { lastAction } = currentControlData;\n            let returnvalue = true;\n            if (!actions["h" /* cellTypes */][lastAction.type]) {\n                return false;\n            }\n            // only process once\n            if (previousControlData && currentControlData.generation == previousControlData.generation) {\n                return false;\n            }\n            let { budgetCell } = this.props;\n            let cellDeclaration = this.cellDeclaration;\n            switch (lastAction.type) {\n                case actions["h" /* cellTypes */].UPDATE_CELL_CHART_CODE:\n                    {\n                        budgetCell.switchChartCode();\n                        break;\n                    }\n                case actions["h" /* cellTypes */].UPDATE_CELL_TIMECODE:\n                    {\n                        budgetCell.switchYearScope();\n                    }\n            }\n            this._previousControlData = currentControlData;\n        };\n        this.onChangeChartCode = explorerChartCode => {\n            let { budgetCell } = this.props;\n            this.props.globalStateActions.updateCellChartCode(budgetCell.uid, explorerChartCode);\n        };\n        this.onChangeChartYears = (leftYear, rightYear) => {\n            let { budgetCell } = this.props;\n            this.props.globalStateActions.updateCellYearSelections(leftYear, rightYear);\n        };\n        this.onChangeTimeCode = explorerTimeCode => {\n            let { budgetCell } = this.props;\n            this.props.globalStateActions.updateCellTimeScope(budgetCell.uid, explorerTimeCode);\n        };\n        this.onToggleDelta = () => {\n            this.setState({\n                deltastate: !this.state.deltastate\n            });\n        };\n        this.onToggleNet = () => {\n            this.setState({\n                netstate: !this.state.netstate\n            });\n        };\n        this.onToggleVariance = () => {\n            this.setState({\n                variancestate: !this.state.variancestate\n            });\n        };\n        this.datatableparms = {\n            tableparms: null\n        };\n        this.onDataTable = e => {\n            let budgetCell = this.props.budgetCell;\n            let tableparms = budgetCell.getDataTable();\n            // console.log(\'onDataTable tableparms\',tableparms)\n            this.datatableparms.tableparms = tableparms;\n            this.setState({\n                datatableopen: true\n            });\n        };\n        this.onReqestCloseDataTable = () => {\n            this.setState({\n                datatableopen: false\n            });\n        };\n        this.onConfirmDataExport = () => {};\n        this.onHarmonize = () => {\n            this.props.callbacks.harmonizeCells(this.props.budgetCell.nodeDataPack.budgetNode.uid, this.props.budgetCell.uid);\n        };\n    }\n    componentWillMount() {\n        let { budgetCell, urlparms } = this.props;\n        budgetCell.getProps = this.getProps;\n        budgetCell.getState = this.getState;\n        budgetCell.setState = this.setState.bind(this);\n        budgetCell.setChartParms();\n        if (urlparms) {\n            this.urlparms = urlparms;\n        }\n    }\n    componentDidMount() {\n        this._previousControlData = this.props.declarationData; // initialize\n        let { budgetCell } = this.props;\n        setTimeout(() => {\n            budgetCell.refreshSelection(); // for re-creation; last pie chart is missed\n        });\n        // console.log(\'budgetCell\',this.props.budgetCell)\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        let cellComponent = this;\n        return utilities["b" /* default */].filterActionsForUpdate(nextProps, cellComponent);\n    }\n    componentDidUpdate() {\n        let explorerCell = this;\n        explorerCell._respondToGlobalStateChange();\n        explorerCell.props.budgetCell.refreshSelection();\n    }\n    // conveniences... get x 2\n    get cellDeclaration() {\n        return this.props.declarationData.cellsById[this.props.budgetCell.uid];\n    }\n    get chartConfig() {\n        let cellDeclaration = this.cellDeclaration;\n        return cellDeclaration.chartConfigs[cellDeclaration.yearScope];\n    }\n    render() {\n        let { budgetCell } = this.props;\n        let cellDeclaration = this.props.declarationData.cellsById[budgetCell.uid];\n        let yearScope = cellDeclaration.yearScope;\n        let { chartParms, explorerChartCode, graph_id, viewpointConfigPack } = budgetCell;\n        let { datasetConfig } = viewpointConfigPack;\n        let { start: startYear, end: endYear } = datasetConfig.YearsRange;\n        let yearSpan = endYear - startYear;\n        let leftYear = budgetCell.nodeDataPack.yearSelections.leftYear;\n        let rightYear = budgetCell.nodeDataPack.yearSelections.rightYear;\n        // get drilldown message\n        let datanode = budgetCell.nodeDataPack.treeNodeData;\n        let datasetiestype = budgetCell.nodeDataseriesName;\n        let drillDownProperty = datasetiestype + \'Drilldown\';\n        let drillDown = datanode[drillDownProperty] || \'None\';\n        let drilldownmessage;\n        if (drillDown == \'All\') {\n            drilldownmessage = \'drilldown is available for all elements here\';\n        } else if (drillDown == \'Some\') {\n            drilldownmessage = \'some elements allow drilldown here\';\n        } else {\n            drilldownmessage = \'no drilldown is available here\';\n        }\n        let isDataAvailable = true;\n        if (yearScope == \'OneYear\') {\n            isDataAvailable = false;\n            let data = datanode[datasetiestype];\n            for (let index in data) {\n                if (data[index].years && data[index].years[rightYear]) {\n                    isDataAvailable = true;\n                    break;\n                }\n            }\n        }\n        let timescopes = react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                borderRight: "1px solid silver",\n                marginRight: "3px",\n                position: "relative",\n                display: "inline-block"\n            } }, react["createElement"]("div", { style: { position: "absolute", top: "0", left: "0", fontSize: "8px" } }, "number of years to include"), react["createElement"](IconButton_default.a, { tooltip: "One year", tooltipPosition: "top-center", style: {\n                backgroundColor: this.cellDeclaration.yearScope == constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? "rgba(144,238,144,0.5)" : "rgba(255,255,255,0.5)",\n                borderRadius: "15%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeTimeCode(constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear]);\n            } }, react["createElement"](SvgIcon_default.a, { style: { height: "36px", width: "36px" }, viewBox: "0 0 36 36" }, react["createElement"]("rect", { x: "13", y: "13", width: "10", height: "10" }))), react["createElement"](IconButton_default.a, { tooltip: "Two years", disabled: yearSpan === 0, tooltipPosition: "top-center", style: {\n                backgroundColor: this.cellDeclaration.yearScope == constants["d" /* TimeScope */][constants["d" /* TimeScope */].TwoYears] ? "rgba(144,238,144,0.5)" : "rgba(255,255,255,0.5)",\n                borderRadius: "15%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeTimeCode(constants["d" /* TimeScope */][constants["d" /* TimeScope */].TwoYears]);\n            } }, react["createElement"](SvgIcon_default.a, { style: { height: "36px", width: "36px" }, viewBox: "0 0 36 36" }, react["createElement"]("rect", { x: "4", y: "13", width: "10", height: "10" }), react["createElement"]("rect", { x: "22", y: "13", width: "10", height: "10" }))), react["createElement"](IconButton_default.a, { tooltip: "All years", tooltipPosition: "top-center", disabled: yearSpan === 0, style: {\n                backgroundColor: this.cellDeclaration.yearScope == constants["d" /* TimeScope */][constants["d" /* TimeScope */].AllYears] ? "rgba(144,238,144,0.5)" : "rgba(255,255,255,0.5)",\n                borderRadius: "15%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeTimeCode(constants["d" /* TimeScope */][constants["d" /* TimeScope */].AllYears]);\n            } }, react["createElement"](SvgIcon_default.a, { style: { height: "36px", width: "36px" }, viewBox: "0 0 36 36" }, react["createElement"]("ellipse", { cx: "6", cy: "18", rx: "4", ry: "4" }), react["createElement"]("ellipse", { cx: "18", cy: "18", rx: "4", ry: "4" }), react["createElement"]("ellipse", { cx: "30", cy: "18", rx: "4", ry: "4" }))));\n        // =====================[ options for getchartoptions() ]=======================\n        let columnchart = react["createElement"](IconButton_default.a, { key: \'columnchart\', tooltip: "Column Chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "ColumnChart" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'ColumnChart\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "insert_chart"));\n        let diffcolumnchart = react["createElement"](IconButton_default.a, { key: \'diffchart\', tooltip: "Diff Column Chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "DiffColumnChart" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'DiffColumnChart\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "insert_chart"));\n        let donutchart = react["createElement"](IconButton_default.a, { key: \'donutchart\', tooltip: "Donut Pie Chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "DonutChart" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'DonutChart\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "donut_small"));\n        let diffpiechart = react["createElement"](IconButton_default.a, { key: \'donutchart\', tooltip: "Diff Pie Chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "DiffPieChart" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'DiffPieChart\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "donut_small"));\n        let contextchart = react["createElement"](IconButton_default.a, { disabled: true, key: \'contextchart\', tooltip: "Context Chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "ContextChart" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'ContextChart\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "view_quilt"));\n        let timelines = react["createElement"](IconButton_default.a, { key: \'timelines\', tooltip: "Timeline", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "TimeLine" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0 0 0 6px",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'TimeLine\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "timelines"));\n        let stackedchart = react["createElement"](IconButton_default.a, { key: \'stackedchart\', tooltip: "Stacked chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "StackedArea" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'StackedArea\');\n            } }, react["createElement"](SvgIcon_default.a, { style: { height: "24px", width: "24px" } }, react["createElement"]("path", { d: "M20,6c0-0.587-0.257-1.167-0.75-1.562c-0.863-0.69-2.121-0.551-2.812,0.312l-2.789,3.486L11.2,6.4  c-0.864-0.648-2.087-0.493-2.762,0.351l-4,5C4.144,12.119,4,12.562,4,13v3h16V6z" }), react["createElement"]("path", { d: "M20,19H4c-0.552,0-1,0.447-1,1s0.448,1,1,1h16c0.552,0,1-0.447,1-1S20.552,19,20,19z" })));\n        let proportionalchart = react["createElement"](IconButton_default.a, { key: \'propchart\', tooltip: "Proportional chart", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "Proportional" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onChangeChartCode(\'Proportional\');\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "view_stream"));\n        let getchartoptions = () => {\n            let chartoptions;\n            switch (this.cellDeclaration.yearScope) {\n                case constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear]:\n                    chartoptions = [columnchart, donutchart]; //, contextchart ]\n                    break;\n                case constants["d" /* TimeScope */][constants["d" /* TimeScope */].TwoYears]:\n                    chartoptions = [diffcolumnchart, diffpiechart];\n                    break;\n                case constants["d" /* TimeScope */][constants["d" /* TimeScope */].AllYears]:\n                    chartoptions = [timelines, stackedchart, proportionalchart];\n                    break;\n            }\n            return react["createElement"]("div", { style: {\n                    paddingTop: "10px",\n                    borderRight: "1px solid silver",\n                    marginRight: "3px",\n                    position: "relative",\n                    display: "inline-block"\n                } }, react["createElement"]("div", { style: { position: "absolute", top: "0", left: "0", fontSize: "8px" } }, "available charts"), chartoptions);\n        };\n        let chartoptions = getchartoptions();\n        let deltatoggle = this.cellDeclaration.yearScope != constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                borderRight: "1px solid silver",\n                marginRight: "3px",\n                position: "relative",\n                display: "inline-block"\n            } }, react["createElement"]("div", { style: {\n                position: "absolute",\n                top: "0",\n                left: "0",\n                fontSize: "8px",\n                zIndex: 10\n            } }, "year-over-", react["createElement"]("br", null), " year"), react["createElement"](IconButton_default.a, { disabled: false, tooltip: "Year-over-year change", tooltipPosition: "top-center", style: {\n                backgroundColor: this.state.deltastate ? "rgba(144,238,144,0.5)" : "rgba(255,255,255,0.5)",\n                borderRadius: "15%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onToggleDelta();\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "change_history"))) : null;\n        let nettoggle = this.cellDeclaration.yearScope != constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                borderRight: "1px solid silver",\n                marginRight: "3px",\n                position: "relative",\n                display: "inline-block"\n            } }, react["createElement"]("div", { style: { position: "absolute", top: "0", left: "0", fontSize: "8px" } }, "net"), react["createElement"](IconButton_default.a, { disabled: true, tooltip: "Net (revenue - expenses)", tooltipPosition: "top-center", style: {\n                backgroundColor: this.state.netstate ? "rgba(144,238,144,0.5)" : "rgba(255,255,255,0.5)",\n                borderRadius: "15%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onToggleNet();\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "exposure"))) : null;\n        let variancetoggle = this.cellDeclaration.yearScope != constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                borderRight: "1px solid silver",\n                marginRight: "3px",\n                position: "relative",\n                display: "inline-block"\n            } }, react["createElement"]("div", { style: { position: "absolute", top: "0", left: "0", fontSize: "8px" } }, "variance"), react["createElement"](IconButton_default.a, { disabled: true, tooltip: "Variance (actual - budget)", tooltipPosition: "top-center", style: {\n                backgroundColor: this.state.variancestate ? "rgba(144,238,144,0.5)" : "rgba(255,255,255,0.5)",\n                borderRadius: "15%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onToggleVariance();\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "exposure"))) : null;\n        // ----------------------[ options for below the chart ]---------------------------\n        let datatable = react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                borderLeft: "1px solid silver",\n                marginRight: "3px",\n                position: "relative",\n                display: "inline-block"\n            } }, react["createElement"]("div", { style: {\n                paddingLeft: \'3px\',\n                position: "absolute",\n                top: "0",\n                left: "0",\n                fontSize: "8px",\n                textAlign: "left"\n            } }, "see data", react["createElement"]("br", null), "table"), react["createElement"](IconButton_default.a, { disabled: false, tooltip: "Data Table", tooltipPosition: "top-center", style: {\n                backgroundColor: explorerChartCode == "DataTable" ? "rgba(144,238,144,0.5)" : "transparent",\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onDataTable(e);\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "view_list")));\n        let harmonizeoptions = react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                borderLeft: "1px solid silver",\n                borderRight: "1px solid silver",\n                paddingRight: "3px",\n                position: "relative",\n                display: "inline-block"\n            } }, react["createElement"]("div", { style: {\n                paddingLeft: \'3px\',\n                position: "absolute",\n                top: "0",\n                left: "0",\n                fontSize: "8px"\n            } }, "harmonize ", react["createElement"]("br", null), "settings"), react["createElement"](IconButton_default.a, { tooltip: "Harmonize settings for row", tooltipPosition: "top-center", style: {\n                borderRadius: "50%",\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, onClick: e => {\n                this.onHarmonize();\n            } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "swap_horiz")));\n        let socialoptions = react["createElement"]("div", { style: {\n                paddingTop: "10px",\n                display: "inline-block",\n                position: "relative"\n            } }, react["createElement"]("div", { style: { paddingLeft: "3px", position: "absolute", top: "0", left: "0", fontSize: "8px" } }, "social [deferred]"), react["createElement"](IconButton_default.a, { tooltip: "Shared stories", tooltipPosition: "top-center", style: {\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, disabled: true }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "share")), react["createElement"](IconButton_default.a, { tooltip: "Calls to action", tooltipPosition: "top-center", style: {\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px",\n                marginLeft: "3px"\n            }, disabled: true }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "announcement")));\n        let informationoptions = react["createElement"]("div", { style: {\n                display: "inline-block",\n                paddingTop: "10px",\n                borderLeft: "1px solid silver",\n                borderRight: "1px solid silver",\n                position: "relative"\n            } }, react["createElement"]("div", { style: { paddingLeft: "3px", position: "absolute", top: "0", left: "0", fontSize: "8px" } }, "information [deferred]"), react["createElement"](IconButton_default.a, { tooltip: "Information", tooltipPosition: "top-center", style: {\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px"\n            }, disabled: true }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "info_outline")), react["createElement"](IconButton_default.a, { tooltip: "Technical notes", tooltipPosition: "top-center", style: {\n                padding: "0",\n                height: "36px",\n                width: "36px",\n                marginRight: "3px",\n                marginLeft: "3px"\n            }, disabled: true }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "note")));\n        // ------------------------------[ the chart itself ]-----------------------------\n        // console.log(chartParms)\n        let chart = chartParms ? isDataAvailable ? react["createElement"](Chart, { ref: node => {\n                budgetCell.chartComponent = node;\n            }, chartType: chartParms.chartType, options: chartParms.options, chartEvents: chartParms.events, rows: chartParms.rows, columns: chartParms.columns, diffdata: chartParms.diffdata,\n            // used to create and cache html element id attribute\n            graph_id: graph_id }) : react["createElement"]("div", { style: {\n                width: \'360px\',\n                height: \'220px\',\n                backgroundColor: \'whitesmoke\',\n                textAlign: \'center\',\n                fontStyle: \'italic\',\n                whiteSpace: \'normal\',\n                fontSize: \'smaller\',\n                padding: \'40px 20px\'\n            } }, " ", react["createElement"]("p", null, "no data for this chart for the selected year: "), react["createElement"]("p", null, budgetCell.chartParmsObject.options.title), react["createElement"]("p", null, "(", budgetCell.chartParmsObject.options.hAxis.title, ")")) : react["createElement"]("div", null, " waiting for chart data... ");\n        if (!isDataAvailable) {\n            drilldownmessage = null;\n        }\n        let drilldownprompt = react["createElement"]("div", { style: {\n                position: "absolute",\n                bottom: "-12px",\n                left: "3px",\n                fontSize: "9px",\n                fontStyle: "italic"\n            } }, drilldownmessage);\n        let informationprompt = () => {\n            let viewpoint = this.props.budgetCell.nodeDataPack.budgetNode.branchSettings.viewpoint;\n            let nodepath = this.props.budgetCell.nodeDataPack.budgetNode.dataPath;\n            return viewpoint == \'FUNCTIONAL\' || viewpoint == \'STRUCTURAL\' ? react["createElement"]("div", { style: {\n                    display: \'inline-block\',\n                    // position:"absolute",\n                    // top:"8px",\n                    // right:"3px",\n                    fontSize: "9px",\n                    fontStyle: "italic",\n                    zIndex: 10\n                } }, react["createElement"](IconButton_default.a, { tooltip: "Information", tooltipPosition: "top-center", onClick: () => {\n                    this.props.onCallAnalystNotes(viewpoint, nodepath);\n                }, style: {\n                    padding: "0",\n                    height: "36px",\n                    width: "36px",\n                    marginRight: "3px"\n                } }, react["createElement"](FontIcon_default.a, { className: "material-icons" }, "info_outline"))) : null;\n        };\n        // ----------------------[ year selections ]---------------------------------\n        let yearsoptions = () => {\n            let years = [];\n            for (let year = startYear; year <= endYear; year++) {\n                let yearitem = react["createElement"](MenuItem_default.a, { key: year, value: year, primaryText: year.toString() });\n                years.push(yearitem);\n            }\n            return years;\n        };\n        let yearselection = () => {\n            let height = this.props.showControls ? "53px" : "12px";\n            return react["createElement"]("div", { style: {\n                    height: height,\n                    transition: \'height .5s\'\n                } }, this.props.showControls ? react["createElement"]("div", { style: { paddingBottom: "3px" } }, react["createElement"]("span", { style: { fontStyle: "italic", verticalAlign: \'25px\', lineHeight: \'48px\' } }, "Select ", yearScope == constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? \'year\' : \'years\', ": "), yearScope != constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? react["createElement"](DropDownMenu_default.a, { value: leftYear, style: {}, onChange: (e, key, payload) => {\n                    this.onChangeChartYears(payload, rightYear);\n                } }, yearsoptions()) : null, yearScope == constants["d" /* TimeScope */][constants["d" /* TimeScope */].OneYear] ? null : yearScope == constants["d" /* TimeScope */][constants["d" /* TimeScope */].TwoYears] ? react["createElement"]("span", { style: { verticalAlign: \'25px\', lineHeight: \'48px\' } }, ":") : react["createElement"]("span", { style: { verticalAlign: \'25px\', lineHeight: \'48px\' } }, "-"), react["createElement"](DropDownMenu_default.a, { value: rightYear, style: {}, onChange: (e, key, payload) => {\n                    this.onChangeChartYears(leftYear, payload);\n                } }, yearsoptions())) : react["createElement"]("div", { style: { height: "12px" } }));\n        };\n        let controlBarHeight = this.props.showControls ? "52px" : "0px";\n        return react["createElement"]("div", null, react["createElement"]("div", { style: { height: controlBarHeight, transition: \'height .5s\', overflow: \'hidden\' } }, react["createElement"]("div", { style: { padding: "3px" } }, react["createElement"]("div", { style: { float: \'right\' } }, informationprompt(), datatable, harmonizeoptions), timescopes, chartoptions)), react["createElement"]("div", { style: { position: "relative" } }, chart, drilldownprompt), react["createElement"]("div", { style: { padding: "3px", textAlign: "center" } }, yearselection()), this.state.datatableopen ? react["createElement"](components_datatable, { specifications: this.datatableparms.tableparms, onRequestClose: this.onReqestCloseDataTable }) : null);\n    }\n}\n/* harmony default export */ var explorercell = (explorercell_ExplorerCell);\n// CONCATENATED MODULE: ./ts/addons/explorer/components/explorernode.tsx\n// copyright (c) 2016 Henrik Bechmann, Toronto, MIT Licence\n// explorerportal.tsx\n/*\n    TODO: include output checkbox per node for printing prep\n    - with clean start, switching to second tab causes \'jump\' to top of page\n       ... but not clicking first tab after selecting second\n*/\n\n\n\nvar { Component: explorernode_Component } = react;\n\n\n\nlet { StyleRoot } = es;\nconst animations = {\n    fadeIn: {\n        animation: \'x .7s\',\n        animationName: keyframes["a" /* default */](lib["fadeIn"], \'fadeIn\')\n    }\n};\n\n\n\nclass explorernode_ExplorerNode extends explorernode_Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            nodeCells: [],\n            animation: animations.fadeIn\n        };\n        this.waitafteraction = 0;\n        // for BudgetNode instance...\n        this.getState = () => this.state;\n        this.getProps = () => this.props;\n        this.urlparms = null;\n        this.story = null;\n        this.oldDataGenerationCounter = null;\n        /*\n            return false for redundant updates\n            this reduces updates by about half, therefore\n            reducing update delay caused by cascading events\n        */\n        this.lastactiongeneration = 0;\n        // state change manager\n        this._respondToGlobalStateChange = () => {\n            let previousControlData = this._previousControlData;\n            let currentControlData = this.props.declarationData;\n            let { lastAction } = currentControlData;\n            let returnvalue = true;\n            if (!actions["q" /* nodeTypes */][lastAction.type]) {\n                return false;\n            }\n            // only process once\n            if (previousControlData && currentControlData.generation == previousControlData.generation) {\n                return false;\n            }\n            let { budgetNode } = this.props;\n            let nodeDeclaration = this.props.declarationData.nodesById[budgetNode.uid];\n            switch (lastAction.type) {\n                case actions["q" /* nodeTypes */].NORMALIZE_CELL_YEAR_DEPENDENCIES:\n                    {\n                        let currentYearSelections = currentControlData.nodesById[budgetNode.uid].yearSelections;\n                        let previousYearSelections = previousControlData.nodesById[budgetNode.uid].yearSelections;\n                        if (currentYearSelections.leftYear !== previousYearSelections.leftYear || currentYearSelections.rightYear !== previousYearSelections.rightYear) {\n                            budgetNode.switchYearSelections(Object.assign({}, currentYearSelections));\n                            this.forceUpdate();\n                        }\n                        break;\n                    }\n                case actions["q" /* nodeTypes */].UPDATE_NODE_YEAR_SELECTIONS:\n                    {\n                        budgetNode.switchYearSelections(currentControlData.nodesById[budgetNode.uid].yearSelections);\n                        break;\n                    }\n            }\n            this._previousControlData = currentControlData;\n        };\n        this.updateCellsFromDeclarations = props => {\n            let { budgetNode } = props; // this.props\n            if (budgetNode.updated) {\n                this.setState({\n                    nodeCells: [...budgetNode.newCells]\n                });\n                budgetNode.newCells = null;\n                budgetNode.updated = false;\n            }\n        };\n        this.harmonizecount = null;\n        // harmonize branch nodes; add pending node objects, and process state changes\n        this._harmonizeCellsToState = props => {\n            let returnvalue = false;\n            let { budgetNode, declarationData } = props;\n            let cells = budgetNode.cells;\n            let { cellList } = declarationData.nodesById[budgetNode.uid];\n            // remove any deleted cells\n            let { cellsById } = declarationData;\n            let newCells = cells.filter(cell => {\n                return !!cellsById[cell.uid];\n            });\n            if (newCells.length != cells.length) {\n                this.setState({\n                    nodeCells: newCells\n                });\n                cells = budgetNode.cells;\n            }\n            // harmonization required if there is a mismatch between cells and cellList\n            if (cells.length != cellList.length && this.harmonizecount == null) {\n                // console.log(\'harmonizing cells for\',budgetNode.uid)\n                this.harmonizecount = cellList.length - cells.length;\n                let cellParms = [];\n                let { cellsById } = declarationData;\n                for (let cellid of cellList) {\n                    cellParms.push(cellsById[cellid]);\n                }\n                let newcells = budgetNode.setCells(cellParms);\n                if (newcells.length == cellList.length) {\n                    this.harmonizecount = null;\n                }\n                returnvalue = true;\n                this.setState({\n                    nodeCells: newcells\n                });\n            }\n            return returnvalue;\n        };\n        this._normalizeCellDeclarations = props => {\n            let { budgetNode } = props;\n            let nodeDeclaration = props.declarationData.nodesById[budgetNode.uid];\n            let cellList = nodeDeclaration.cellList;\n            let yearsRange = budgetNode.viewpointConfigPack.datasetConfig.YearsRange;\n            this._stateActions.normalizeCellYearDependencies(budgetNode.uid, cellList, yearsRange);\n        };\n        this.onChangeTab = tabref => {\n            this.props.globalStateActions.changeTab(this.props.budgetNode.uid, tabref);\n        };\n        this._chartrefs = [];\n        this.getChartTabs = () => {\n            // generate array of chart tabs\n            let { callbackid, budgetNode } = this.props;\n            let budgetCells = budgetNode.cells;\n            let portalSettings = budgetNode.portalConfig;\n            // let { chartConfigs } = portalSettings \n            let cellTabs = budgetCells.map((budgetCell, cellIndex) => {\n                let { cellTitle } = budgetCell;\n                return react["createElement"](Tabs["Tab"], { style: {\n                        fontSize: "12px"\n                    }, label: cellTitle, value: cellIndex, key: cellIndex }, react["createElement"](explorercell, { declarationData: this.props.declarationData, callbackid: cellIndex, budgetCell: budgetCell, globalStateActions: {\n                        updateCellTimeScope: this.props.globalStateActions.updateCellTimeScope,\n                        updateCellChartCode: this.props.globalStateActions.updateCellChartCode,\n                        updateCellYearSelections: this.props.globalStateActions.updateCellYearSelections\n                    }, showControls: this.props.showControls, callbacks: this.props.callbacks, urlparms: this.urlparms, onCallAnalystNotes: this.props.onCallAnalystNotes }));\n            });\n            return cellTabs;\n        };\n        this.getTabObject = chartTabs => {\n            // this deals with the edge case where switching aspects causes current tail\n            // chart to change from 2 charts to one by adding a value attr to tabs component\n            let nodeDeclaration = this.props.declarationData.nodesById[this.props.budgetNode.uid];\n            let tabSelection = nodeDeclaration.cellIndex;\n            if (chartTabs.length == 0) {\n                return react["createElement"]("div", { style: {\n                        height: "400px",\n                        textAlign: "center",\n                        verticalAlign: "middle",\n                        lineHeight: "400px"\n                    } }, "Waiting for data...");\n            }\n            return react["createElement"](Tabs["Tabs"], { value: tabSelection, onChange: tabref => {\n                    this.onChangeTab(tabref);\n                } }, chartTabs);\n        };\n    }\n    componentWillMount() {\n        let { budgetNode, declarationData, urlparms, story } = this.props;\n        // console.log(\'componentWillMount for\',budgetNode)\n        // console.log(\'componentWillMount story\',story)\n        if (story) {\n            this.story = story;\n        }\n        if (urlparms) {\n            this.urlparms = urlparms;\n        }\n        this._stateActions = Object.assign({}, this.props.globalStateActions);\n        budgetNode.getState = this.getState;\n        budgetNode.getProps = this.getProps;\n        budgetNode.setState = this.setState.bind(this);\n        budgetNode.actions = this._stateActions;\n        let nodeDeclaration = declarationData.nodesById[budgetNode.uid];\n        if (nodeDeclaration.cellList == null) {\n            // get controlData for cellList\n            // TODO: cloning with JSON is required here to avoid cross linking chartType - shoud be traced\n            let cellDeclarationParms = JSON.parse(JSON.stringify(budgetNode.getCellDeclarationParms()));\n            if (story) {\n                // console.log(\'node cellDeclarationParms for story\',cellDeclarationParms,budgetNode.nodeIndex,story)\n                if (story.charts === true || budgetNode.nodeIndex == story.path.length && story.leafchart) {\n                    let cellparms = cellDeclarationParms[story.tab];\n                    if (!cellparms) {\n                        console.error(\'error:cellparms failed\', story, cellDeclarationParms, budgetNode);\n                    }\n                    let chartspecs = story.leafchart.split(\':\');\n                    cellparms.yearScope = chartspecs[0];\n                    cellparms.chartConfigs[cellparms.yearScope].explorerChartCode = chartspecs[1];\n                }\n                // set chartSelection value for drilldown cell if required\n                let { nodeIndex } = budgetNode;\n                let { path } = story;\n                // console.log(\'cellparms\',nodeIndex,cellIndex,cellparms)\n                if (nodeIndex < path.length) {\n                    let code = path[nodeIndex];\n                    let { datasetConfig } = budgetNode.viewpointConfigPack;\n                    let { Dataseries } = datasetConfig;\n                    let drilldownindex = null;\n                    for (let itemindex in Dataseries) {\n                        let item = Dataseries[itemindex];\n                        if (item.Type == \'Components\') {\n                            drilldownindex = parseInt(itemindex);\n                            break;\n                        }\n                    }\n                    if (drilldownindex !== null) {\n                        let drilldownparms = cellDeclarationParms[drilldownindex];\n                        let nodeDataList = budgetNode.treeNodeData.SortedComponents;\n                        let chartSelection = null;\n                        for (let index in nodeDataList) {\n                            let item = nodeDataList[index];\n                            if (item.Code == code) {\n                                chartSelection = parseInt(index);\n                                break;\n                            }\n                        }\n                        if (chartSelection !== null) {\n                            drilldownparms.chartSelection = chartSelection;\n                        }\n                    }\n                }\n                this.story = null;\n                this.props.clearStory(budgetNode.nodeIndex);\n            }\n            if (urlparms) {\n                // apply imported parms\n                let cellurlparms = urlparms.settingsdata[budgetNode.nodeIndex];\n                let cellIndex = cellurlparms.ci;\n                let cellparms = cellDeclarationParms[cellIndex];\n                cellparms.yearScope = cellurlparms.c.ys;\n                cellparms.chartConfigs[cellparms.yearScope].explorerChartCode = cellurlparms.c.ct;\n                // set chartSelection value for drilldown cell if required\n                let { nodeIndex } = budgetNode;\n                // console.log(\'cellparms\',nodeIndex,cellIndex,cellparms)\n                if (nodeIndex < urlparms.branchdata.pa.length) {\n                    let code = urlparms.branchdata.pa[nodeIndex];\n                    let { datasetConfig } = budgetNode.viewpointConfigPack;\n                    let { Dataseries } = datasetConfig;\n                    let drilldownindex = null;\n                    for (let itemindex in Dataseries) {\n                        let item = Dataseries[itemindex];\n                        if (item.Type == \'Components\') {\n                            drilldownindex = parseInt(itemindex);\n                            break;\n                        }\n                    }\n                    if (drilldownindex !== null) {\n                        let drilldownparms = cellDeclarationParms[drilldownindex];\n                        let nodeDataList = budgetNode.treeNodeData.SortedComponents;\n                        let chartSelection = null;\n                        for (let index in nodeDataList) {\n                            let item = nodeDataList[index];\n                            if (item.Code == code) {\n                                chartSelection = parseInt(index);\n                                break;\n                            }\n                        }\n                        if (chartSelection !== null) {\n                            drilldownparms.chartSelection = chartSelection;\n                        }\n                    }\n                }\n                this.urlparms = null;\n                this.props.clearUrlParms(budgetNode.nodeIndex);\n            }\n            this._stateActions.addCellDeclarations(budgetNode.uid, cellDeclarationParms);\n        } else {\n            this._stateActions.updateNode(budgetNode.uid); // trigger update -> render\n        }\n    }\n    // remove obsolete cell objects; update cell list if needed\n    componentWillReceiveProps(nextProps) {\n        let { dataGenerationCounter, budgetNode } = nextProps;\n        let { oldDataGenerationCounter } = this;\n        let lastAction = nextProps.declarationData.lastAction;\n        if (oldDataGenerationCounter === null || dataGenerationCounter > oldDataGenerationCounter) {\n            this.oldDataGenerationCounter = dataGenerationCounter;\n            // normalize cell settings to year dependency constraints\n            this._normalizeCellDeclarations(nextProps);\n        } else {\n            this.updateCellsFromDeclarations(nextProps);\n            this._harmonizeCellsToState(nextProps);\n            if (budgetNode.new) {\n                budgetNode.new = false;\n            }\n        }\n    }\n    shouldComponentUpdate(nextProps) {\n        let nodeComponent = this;\n        return utilities["b" /* default */].filterActionsForUpdate(nextProps, nodeComponent);\n    }\n    componentDidUpdate() {\n        let budgetNode = this;\n        budgetNode._respondToGlobalStateChange();\n    }\n    render() {\n        let nodeDeclaration = this.props.declarationData.nodesById[this.props.budgetNode.uid];\n        // console.log(\'nodeDeclaration\', nodeDeclaration)\n        let chartTabs = this.getChartTabs();\n        let tabobject = this.getTabObject(chartTabs);\n        let { portalConfig: portalSettings } = this.props.budgetNode;\n        return react["createElement"](StyleRoot, { style: { display: \'inline-block\' } }, react["createElement"]("div", { style: [{\n                position: "relative",\n                display: "inline-block",\n                padding: "10px",\n                backgroundColor: "Beige",\n                verticalAlign: "top",\n                width: "400px",\n                borderRight: "1px solid silver"\n            }, this.state.animation] }, react["createElement"]("div", { style: {\n                position: "absolute",\n                top: 0,\n                left: "10px",\n                padding: "3px 20px 3px 20px",\n                borderRadius: "6px",\n                border: "1px solid silver",\n                fontSize: "12px",\n                color: "lightgreen",\n                fontWeight: "bold",\n                display: "inline-block",\n                backgroundColor: "#00bcd4"\n            } }, "#" + (this.props.budgetNode.nodeIndex + 1) + ". " + portalSettings.portalName), tabobject));\n    }\n}\n/* harmony default export */ var explorernode = __webpack_exports__["default"] = (explorernode_ExplorerNode);\n\n//# sourceURL=webpack:///./ts/addons/explorer/components/explorernode.tsx_+_2_modules?')}}]);